// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: timezone/timezone.proto

package timezone

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TimezoneService_SetTimezone_FullMethodName    = "/timezone.TimezoneService/SetTimezone"
	TimezoneService_GetTimezone_FullMethodName    = "/timezone.TimezoneService/GetTimezone"
	TimezoneService_DeleteTimezone_FullMethodName = "/timezone.TimezoneService/DeleteTimezone"
)

// TimezoneServiceClient is the client API for TimezoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimezoneServiceClient interface {
	SetTimezone(ctx context.Context, in *SetTimezoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTimezone(ctx context.Context, in *GetTimezoneRequest, opts ...grpc.CallOption) (*GetTimezoneResponse, error)
	DeleteTimezone(ctx context.Context, in *DeleteTimezoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type timezoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimezoneServiceClient(cc grpc.ClientConnInterface) TimezoneServiceClient {
	return &timezoneServiceClient{cc}
}

func (c *timezoneServiceClient) SetTimezone(ctx context.Context, in *SetTimezoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TimezoneService_SetTimezone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezoneServiceClient) GetTimezone(ctx context.Context, in *GetTimezoneRequest, opts ...grpc.CallOption) (*GetTimezoneResponse, error) {
	out := new(GetTimezoneResponse)
	err := c.cc.Invoke(ctx, TimezoneService_GetTimezone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezoneServiceClient) DeleteTimezone(ctx context.Context, in *DeleteTimezoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TimezoneService_DeleteTimezone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimezoneServiceServer is the server API for TimezoneService service.
// All implementations should embed UnimplementedTimezoneServiceServer
// for forward compatibility
type TimezoneServiceServer interface {
	SetTimezone(context.Context, *SetTimezoneRequest) (*emptypb.Empty, error)
	GetTimezone(context.Context, *GetTimezoneRequest) (*GetTimezoneResponse, error)
	DeleteTimezone(context.Context, *DeleteTimezoneRequest) (*emptypb.Empty, error)
}

// UnimplementedTimezoneServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTimezoneServiceServer struct {
}

func (UnimplementedTimezoneServiceServer) SetTimezone(context.Context, *SetTimezoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimezone not implemented")
}
func (UnimplementedTimezoneServiceServer) GetTimezone(context.Context, *GetTimezoneRequest) (*GetTimezoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimezone not implemented")
}
func (UnimplementedTimezoneServiceServer) DeleteTimezone(context.Context, *DeleteTimezoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimezone not implemented")
}

// UnsafeTimezoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimezoneServiceServer will
// result in compilation errors.
type UnsafeTimezoneServiceServer interface {
	mustEmbedUnimplementedTimezoneServiceServer()
}

func RegisterTimezoneServiceServer(s grpc.ServiceRegistrar, srv TimezoneServiceServer) {
	s.RegisterService(&TimezoneService_ServiceDesc, srv)
}

func _TimezoneService_SetTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezoneServiceServer).SetTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimezoneService_SetTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezoneServiceServer).SetTimezone(ctx, req.(*SetTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimezoneService_GetTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezoneServiceServer).GetTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimezoneService_GetTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezoneServiceServer).GetTimezone(ctx, req.(*GetTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimezoneService_DeleteTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezoneServiceServer).DeleteTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimezoneService_DeleteTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezoneServiceServer).DeleteTimezone(ctx, req.(*DeleteTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimezoneService_ServiceDesc is the grpc.ServiceDesc for TimezoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimezoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timezone.TimezoneService",
	HandlerType: (*TimezoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTimezone",
			Handler:    _TimezoneService_SetTimezone_Handler,
		},
		{
			MethodName: "GetTimezone",
			Handler:    _TimezoneService_GetTimezone_Handler,
		},
		{
			MethodName: "DeleteTimezone",
			Handler:    _TimezoneService_DeleteTimezone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timezone/timezone.proto",
}
